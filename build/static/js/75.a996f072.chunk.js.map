{"version":3,"file":"static/js/75.a996f072.chunk.js","mappings":"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","sources":["component/pages/AdminPages/ActivityPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Table, Input, Button, Space, Spin, DatePicker, Select } from 'antd';\nimport { SearchOutlined } from '@ant-design/icons';\nimport { GETALLACTIVITY } from '../../../functions/auth';\nimport { useSelector } from 'react-redux';\nimport moment from 'moment';\nimport io from 'socket.io-client';\nimport { toast } from 'react-toastify';\n\nconst { Option } = Select;\n\nconst ActivityPage = () => {\n  const [activities, setActivities] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [searchText, setSearchText] = useState('');\n  const [filteredActivities, setFilteredActivities] = useState([]);\n  const [activityTypeFilter, setActivityTypeFilter] = useState(null);\n  const [emailFilter, setEmailFilter] = useState('');\n  const [dateFilter, setDateFilter] = useState(null);\n  const [mostActiveUser, setMostActiveUser] = useState(null);\n  const { user } = useSelector((state) => state);\n\n  useEffect(() => {\n    const socket = io('https://user-analytics-system-825467496328.us-central1.run.app'); \n\n    socket.on('newActivityrecord', (activity) => {\n      setActivities((prevActivities) => {\n        const updatedActivities = [...prevActivities, activity];\n        setFilteredActivities(updatedActivities);\n        calculateMostActiveUser(updatedActivities);\n        toast.success(`New activity recorded: ${activity.activity}`);\n        return updatedActivities;\n      });\n    });\n\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n\n  useEffect(() => {\n    const fetchActivities = async () => {\n      try {\n        const response = await GETALLACTIVITY(user.token);\n        if (response && response.data) {\n          const formattedActivities = response.data.map((item) => {\n            const action = item.action;\n            let activity = '';\n            let email = '';\n            let timestamp = '';\n\n            if (typeof action === 'string') {\n              activity = action;\n            } else if (typeof action === 'object') {\n              activity = action.activity || 'Unknown Activity';\n              email = action.email || '';\n              timestamp = action.timestamp || '';\n            }\n\n            return {\n              id: item.id,\n              activity,\n              email,\n              timestamp,\n            };\n          });\n\n          setActivities(formattedActivities);\n          setFilteredActivities(formattedActivities);\n          calculateMostActiveUser(formattedActivities);\n          setLoading(false);\n        } else {\n          setLoading(false);\n        }\n      } catch (error) {\n        console.error('Error fetching activities:', error);\n        setLoading(false);\n      }\n    };\n\n    fetchActivities();\n  }, [user.token]);\n\n  const calculateMostActiveUser = (activities) => {\n    const activityCount = activities.reduce((acc, activity) => {\n      acc[activity.email] = (acc[activity.email] || 0) + 1;\n      return acc;\n    }, {});\n\n    const mostActive = Object.entries(activityCount).reduce((max, [email, count]) => {\n      return count > max.count ? { email, count } : max;\n    }, { email: null, count: 0 });\n\n    setMostActiveUser(mostActive.email);\n  };\n\n  const handleSearch = (e) => {\n    setSearchText(e.target.value);\n    filterActivities(e.target.value, activityTypeFilter, emailFilter, dateFilter);\n  };\n\n  const handleActivityFilterChange = (value) => {\n    setActivityTypeFilter(value);\n    filterActivities(searchText, value, emailFilter, dateFilter);\n  };\n\n  const handleEmailFilterChange = (e) => {\n    const value = e.target.value;\n    setEmailFilter(value);\n    filterActivities(searchText, activityTypeFilter, value, dateFilter);\n  };\n\n  const handleDateFilterChange = (date, dateString) => {\n    setDateFilter(dateString);\n    filterActivities(searchText, activityTypeFilter, emailFilter, dateString);\n  };\n\n  const handleMostActiveUserFilter = () => {\n    filterActivities(searchText, activityTypeFilter, mostActiveUser, dateFilter);\n  };\n\n  const handleResetFilters = () => {\n    setActivityTypeFilter(null);\n    setEmailFilter('');\n    setDateFilter(null);\n    setSearchText('');\n    setFilteredActivities(activities);\n  };\n\n  const filterActivities = (search = '', activityType = null, email = '', date = null) => {\n    let filtered = activities.filter((activity) => {\n      return (\n        activity.activity.toLowerCase().includes(search.toLowerCase()) &&\n        (activityType ? activity.activity.includes(activityType) : true) &&\n        (email ? activity.email.includes(email) : true) &&\n        (date ? moment(activity.timestamp).isSame(date, 'day') : true)\n      );\n    });\n    setFilteredActivities(filtered);\n  };\n\n  const uniqueActivities = [...new Set(activities.map(item => item.activity))];\n\n  const columns = [\n    {\n      title: 'Activity',\n      dataIndex: 'activity',\n      key: 'activity',\n    },\n    {\n      title: 'Email',\n      dataIndex: 'email',\n      key: 'email',\n    },\n    {\n      title: 'Timestamp',\n      dataIndex: 'timestamp',\n      key: 'timestamp',\n      render: (timestamp) => new Date(timestamp).toLocaleString(),\n    },\n  ];\n\n  return (\n    <div>\n      <h1 className=\"text-center text-danger\">Users Activities</h1>\n      <div style={{ marginBottom: 16 }}>\n        <Button onClick={handleMostActiveUserFilter} disabled={!mostActiveUser}>\n          Filter Most Active User\n        </Button>\n        <Button onClick={handleResetFilters} style={{ marginLeft: 8 }}>\n          Reset Filters\n        </Button>\n      </div>\n      {loading ? (\n        <Spin size=\"large\" />\n      ) : (\n        <Table\n          columns={columns}\n          dataSource={filteredActivities}\n          rowKey=\"id\"\n          pagination={false}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ActivityPage;\n"],"names":["Option","Select","ActivityPage","activities","setActivities","useState","loading","setLoading","searchText","setSearchText","filteredActivities","setFilteredActivities","activityTypeFilter","setActivityTypeFilter","emailFilter","setEmailFilter","dateFilter","setDateFilter","mostActiveUser","setMostActiveUser","user","useSelector","state","useEffect","socket","io","on","activity","prevActivities","updatedActivities","calculateMostActiveUser","toast","success","concat","disconnect","async","response","GETALLACTIVITY","token","data","formattedActivities","map","item","action","email","timestamp","id","error","console","fetchActivities","activityCount","reduce","acc","mostActive","Object","entries","max","_ref","count","filterActivities","search","arguments","length","undefined","activityType","date","filtered","filter","toLowerCase","includes","moment","isSame","columns","Set","title","dataIndex","key","render","Date","toLocaleString","_jsxs","children","_jsx","className","style","marginBottom","Button","onClick","handleMostActiveUserFilter","disabled","handleResetFilters","marginLeft","Spin","size","Table","dataSource","rowKey","pagination"],"sourceRoot":""}